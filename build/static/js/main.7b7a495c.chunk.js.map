{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["newQuote","quotes","quote","author","index","Math","floor","random","length","RQM","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","firstQuote","state","handleClick","bind","assertThisInitialized","tempQuote","setState","react_default","a","createElement","class","id","className","href","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAGMA,SAAW,WACf,IAAIC,EAAS,CACX,CAACC,MAAS,+FAAgGC,OAAU,cACpH,CAACD,MAAS,2EAA4EC,OAAU,oBAChG,CAACD,MAAS,qEAAsEC,OAAS,yBACzF,CAACD,MAAS,4CAA6CC,OAAU,cACjE,CAACD,MAAS,+CAAgDC,OAAU,iBACpE,CAACD,MAAS,6EAA8EC,OAAS,mBACjG,CAACD,MAAQ,0CAA4CC,OAAU,gBAC/D,CAACD,MAAQ,wEAAyEC,OAAU,aAC5F,CAACD,MAAQ,iGAAkGC,OAAU,eACrH,CAACD,MAAS,qHAAsHC,OAAU,iBAExIC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWN,EAAOO,QAC9C,MAAO,CAACN,MAASD,EAAOG,GAAOF,MAAOC,OAAUF,EAAOG,GAAOD,UA+BjDM,cA3Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACN,IAAIQ,EAAalB,IAFA,OAGjBW,EAAKQ,MAAQ,CACXjB,MAAOgB,EAAWhB,MAClBC,OAAQe,EAAWf,QAErBQ,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IAPFA,6EAUjB,IAAIY,EAAYvB,IAChBc,KAAKU,SAAS,CAACtB,MAAOqB,EAAUrB,MAAOC,OAAQoB,EAAUpB,0CAGzD,OACEsB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,MAAM,qBAA0BH,EAAAC,EAAAC,cAAA,QAAME,GAAG,QAAT,IAAkBf,KAAKK,MAAMjB,MAA7B,KAA2CuB,EAAAC,EAAAC,cAAA,QAAMC,MAAM,sBAC7FH,EAAAC,EAAAC,cAAA,KAAGE,GAAG,UAAUf,KAAKK,MAAMhB,QAC3BsB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,KAAGE,GAAG,cAAcE,KAAK,oCAAmCN,EAAAC,EAAAC,cAAA,KAAGG,UAAU,mBAAzE,qBACAL,EAAAC,EAAAC,cAAA,UAAQE,GAAG,YAAYG,QAASlB,KAAKM,aAAaK,EAAAC,EAAAC,cAAA,KAAGG,UAAU,6BAA/D,iCArBQG,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,cD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7b7a495c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst newQuote = () => {\n  let quotes = [\n    {'quote': 'I love you the more in that I believe you had liked me for my own sake and for nothing else.', 'author': 'John Keats'},\n    {'quote': 'But man is not made for defeat. A man can be destroyed but not defeated.', 'author': 'Ernest Hemingway'},\n    {'quote': 'When you reach the end of your rope, tie a knot in it and hang on.', 'author':'Franklin D. Roosevelt'},\n    {'quote': 'There is nothing permanent except change.', 'author': 'Heraclitus'},\n    {'quote': 'You cannot shake hands with a clenched fist.', 'author': 'Indira Gandhi'},\n    {'quote': 'Find a place inside where there\\'s joy, and the joy will burn out the pain.','author':'Joseph Campbell'},\n    {'quote':'Try to be a rainbow in someone\\'s cloud.', 'author': 'Maya Angelou'},\n    {'quote':'It is during our darkest moments that we must focus to see the light.', 'author': 'Aristotle'},\n    {'quote':'Keep love in your heart. A life without it is like a sunless garden when the flowers are dead.', 'author': 'Oscar Wilde'},\n    {'quote': 'The best and most beautiful things in the world cannot be seen or even touched - they must be felt with the heart.', 'author': 'Helen Keller'}\n  ];\n  let index = Math.floor(Math.random() * quotes.length);\n  return {\"quote\": quotes[index].quote, \"author\": quotes[index].author};\n}\n\nclass RQM extends Component {\n  constructor(props) {\n    super(props);\n    let firstQuote = newQuote();\n    this.state = {\n      quote: firstQuote.quote,\n      author: firstQuote.author\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(){\n    let tempQuote = newQuote();\n    this.setState({quote: tempQuote.quote, author: tempQuote.author});\n  }\n  render() {\n    return (\n      <div>\n        <span class=\"fa fa-quote-left\"></span><span id=\"text\"> {this.state.quote} </span><span class=\"fa fa-quote-right\"></span>\n        <p id=\"author\">{this.state.author}</p>\n        <div className=\"row\">\n          <a id=\"tweet-quote\" href=\"https://twitter.com/intent/tweet\"><i className=\"fab fa-twitter\"></i> Tweet this quote</a>\n          <button id=\"new-quote\" onClick={this.handleClick}><i className=\"fa fa-angle-double-right\"></i> Display a new quote</button>\n        </div>\n      </div>\n    )\n  }\n};\n\nexport default RQM;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RQM from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<RQM />, document.getElementById('quote-box'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}